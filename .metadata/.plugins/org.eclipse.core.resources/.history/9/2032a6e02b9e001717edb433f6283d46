package main.entities.ai;

import main.entities.Entity;
import main.util.EnumDirection;
import main.util.Globals;

public class AI {
	private int anger = 0;
	private int bravery = 0;
	private int inte = 0;
	private Entity entity = null;
	
	public AI(int a, int b, int i, Entity e){
		anger = a;
		bravery = b;
		inte = i;
		entity = e;
	}
	
	//Anything the monster does will be in this method
	public void turn (){
		switch(inte){
		case 0: boredMove();
			break;
		}
		
	}

	//When nothing is aggravating the monster
	public void boredMove() {
		EnumDirection dir = null;
		boolean spaceClear = true;
		do{
			int rand = (int) (4 * Math.random());
			spaceClear = true;
			
			switch(rand) {
			case 0 :
				dir = EnumDirection.DOWN;
				break;
			case 1 :
				dir = EnumDirection.RIGHT;
				break;
			case 2 :
				dir = EnumDirection.UP;
				break;
			case 3 :
				dir = EnumDirection.LEFT;
				break;
			}
		
			//To check if it will walk into another monster or a wall
			if (!(entity.getX() + dir.getX() < 0 || entity.getX() + dir.getX() >= Globals.currentFloor.getWidth())) { //check if x is within bounds of floor
				if (Globals.currentFloor.getTile(entity.getX() + dir.getX(), entity.getY()).isWall() && entity.getTangible()) { //check if there is a wall in the way
					; //There is a wall. Do it again.
				}
			}
				
			if (!(entity.getY() + dir.getY() < 0 || entity.getY() + dir.getY() >= Globals.currentFloor.getHeight())) {
				if (Globals.currentFloor.getTile(entity.getX(), entity.getY() + dir.getY()).isWall() && entity.getTangible()) {
					; //There is a wall. Do it again
				}
			}
		} while (!spaceClear)
		
		
		
		entity.move(dir);
	}

}
